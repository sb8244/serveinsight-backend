#!/usr/bin/env ruby

require 'slack_bot_server'
require 'slack_bot_server/redis_queue'
require 'slack_bot_server/simple_bot'

class SteveBot < SlackBotServer::Bot
  # Respond to messages sent via IM communication directly with the bot.
  on_im do |data|
    #binding.pry
    if data['message'] == 'who are you'
      reply text: "I am #{bot_user_name} (user id: #{bot_user_id}, connected to team #{team_name} with team id #{team_id}"
    elsif data['message'] == 'counts'
      reply text: "#{SurveyInstance.count}"
    else
      reply text: "You said '#{data.message}', and I'm frankly fascinated."
    end
  end
end

# Use a Redis-based queue to add/remove bots and to trigger
# bot messages to be sent
queue = SlackBotServer::RedisQueue.new

# Create a new server using that queue
server = SlackBotServer::Server.new(queue: queue)

# How your application-specific should be created when the server
# is told about a new slack api token to connect with
server.on_add do |token|
  # Return a new bot instance to the server. `SimpleBot` is a provided
  # example bot with some very simple behaviour.
  SteveBot.new(token: token)
end

server.add_bot('<revoked>')

# Actually start the server. This line is blocking; code after
# it won't be executed.
server.start
